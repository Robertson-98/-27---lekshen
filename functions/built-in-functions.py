"=============================Встроеные функции=============================="

#enumerate - функция которая принимает последовательность, и возвращает генератор.

string1 = "hello"
enum = enumerate(string1)
print(enum)                        #<enumerate object at 0x7f1a81cc9c40>
print(list(enum))                  #[(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]

string2 = "world"
enum = enumerate(string2, 5)
print(list(enum))                  #[(5, 'w'), (6, 'o'), (7, 'r'), (8, 'l'), (9, 'd')]


#-----------------------------------------------------------------------------------------------------
list1 = [1,34,3,425,545,343,5,34,5]

for ind in range(len(list1)):
    element = list1[ind]
    if ind % 2:       #
        list1[ind] = element * 2
    if ind % 3 == 0:    
        list1[ind] = element * 3
print(list1)                        #[3, 68, 3, 1275, 545, 686, 15, 68, 5]

#---------------------------------------------------------------------------------------------------------

list1 = [1,34,3,425,545,343,5,34,5]

for ind, element in enumerate(list1):
    if ind % 2:      
        list1[ind] = element * 2
    if ind % 3 == 0:    
        list1[ind] = element * 3
print(list1)                           #[3, 68, 3, 1275, 545, 686, 15, 68, 5]

#-----------------------------------------------------------------------------------------------------------
string = "abcd"
print(dict(enumerate(string, 1)))         #{1: 'a', 2: 'b', 3: 'c', 4: 'd'}

#------------------------------------------------------------------------------------------------------------

# zip

list1 = [1,2,3,4,5]
list2 = "abcdefg"
list3 = [0.5,0.3,0.6]
print(list(zip(list1,list2,list3)))          #[(1, 'a', 0.5), (2, 'b', 0.3), (3, 'c', 0.6)]

#-------------------------------------------------------------------------------------------------------------

"==================================Функция высшего порядка================================"
# Эта функция которая:
#1.принимает в аргументы другую функцию
#2.возвращает функцию
#3.создает внутри функцию
#4.вызывают функции



# map - принимает в аргументы вфункцию и итерируемый обьект. возвращает генератор, в котором все элементы результат 
#         принимаемой функции, в которую передали элементы последовательности.

mapped = map(int, ["1","2","3"])
print(mapped)                      #<map object at 0x7f52cab63f40>
print(list(mapped))                #[1, 2, 3]

#-----------------------------------------------------------------------------------------------------------

list1 = [1,2,3,4,5]     # увеличте каждое число на 1

def pop1(i):
    return i + 1
print(list(map(pop1, list1)))          #[2, 3, 4, 5, 6]

print(list(map(lambda i: i+1, list1)))      #[2, 3, 4, 5, 6]
#-----------------------------------------------------------------------------------------------------------

# filter - принимает в аргументы вфункцию и итерируемый обьект. возвращает генератор, в котором элементы из последовательности 
#  прошедшие фильтр (функция вернула  True )

pop1 = [-4,5,34,-344,435,4,4,-32]
def is_positive(i):
    return i > 0
print(list(filter(is_positive, pop1)))        #[5, 34, 435, 4, 4]

print(list(filter(lambda i: i > 0, pop1)))      #[5, 34, 435, 4, 4]
#------------------------------------------------------------------------------------------------------------

list1 = ["Hello","wORLD","MAKERS"]

res = [i for i in list1 if i[0].isupper()]
print(res)                                         #['Hello', 'MAKERS']

print(list(filter(lambda i: i[0].isupper(), list1)))    #['Hello', 'MAKERS']
#-----------------------------------------------------------------------------------------------------------------


# reduce - функция, которая импортируется из functools. Тоже принимает функцию и итерируемый обьект, и возвращает один результат

from functools import reduce 

list1 = [2,1,3,44,3,2,2,4,2,12]

def mul(x,y):
    return x*y
res = reduce(mul, list1)
print(res)                        #304128
#----------------------------------------------------------------------------------------------------------------

string = 'hello'
print(reduce(lambda x,y: x+'$'+y, string))
# h$e$l$l$o
# x='h', y='e' -> 'h$e'
# x='h$e', y='l' -> 'h$e$l'
# x='h$e$l', y='l' -> 'h$e$l$l'
# x='h$e$l$l', y='o' -> 'h$e$l$l$o'

#---------------------------------------------------------------------------------------------------------------

pop1 = ["hello", "world", "makers", "bootcamp", "aaaaa"]
print(reduce(max, pop1))                                         #world

print(reduce(lambda x,y: x if len(x) > len(y) else y, pop1))       #bootcamp


