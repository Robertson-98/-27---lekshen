"=============================Функции==================================="
# функция - именнованый блок кода, который принимает аргументы и возвращает результат.

func = lambda num1, num2: num1 + num2
pop = func(5, 10)
print(pop)     # 15

#lambda - ключевое слово, для создание анонимной функции!!!-----------------

def my_sum2(num1, num2):  
    return num1 + num2 

pop1 = my_sum2(13, 45)
print(pop1)  # 58

#-------------------------------------------------------------------------------------------------------------
def calc(num1, num2, oper):
    """oper - строка, с операцией для вычисления
    "+" - сложение 
    "-" - вычитание
    """
    if oper == "+":
        return num1 + num2 
    if oper == "-":
        return num1 - num2
    if oper == "*":
        return num1 * num2
    if oper == "/":
        return num1 / num2
print(calc(10, 12, "+"))    #22
print(calc(20, 8, "-"))     #12
print(calc(10, 2, "*"))     #20
print(calc(15, 5, "/"))     #3.0
print(calc(21, 4, "5"))     #None
#-----------------------------------------------------------------------------------------------------------

def my_len(obj):
    "Возвращает длину обьекта"
    count = 0
    for i in obj:
        count += 1
        #count = count + 1
    return count
print(my_len([15,23,64,23,12]))    #5
print(my_len("fgherbjrh"))         #9

#-----------------------------------------------------------------------------------------------------------

def super_len(obj):
    try:                                       # если мы может итерировать обьект 
        return my_len(obj)
    except:                                    # если не можем, тот будем итерировать в виде строки 
        return my_len(str(obj))
print(super_len([1,22,34,4,5,3,4]))   #7
print(super_len(1234567890))          #10

#-----------------------------------------------------------------------------------------------------------
# DRY - don't repeat yourself (не повторяйся)

# представим, что у нас нет фунции len

str_ = "Hello world"
count = 0
for i in str_:
    count += 1
    #count - длина строки  str_




#-----------------------------------------------------------------------------------------------------------
"============================================Аргументы и Параметры================================="
# Параметры - это локальные переменные, значения которым мы задаем при вызове функции.

# Аргументы - это значения, значени которые мы задаем параметрам при вызове функции.

def func(parameter):
    local_var = 5        # {"parameter": 6, "local_var": 5} 
    print(locals())

func(6)
#print(local_var) NameError

"===========================================Виды параметров======================================="
#1.  обязательный 
#2.  необяззательный 
#2/1. с дефолтным значением ( по умолчанию)
#2/2. args (arguments)
#2/3. kwargs ( key  word arguments)

def func(a, b="default", *args, **kwargs):
    # args - tuple, куда поподут все позиционные аргументы ,которые не попали по позиции 
    # kwargs - dict, куда попадут все именованные аргументы,которые не попали по имени
    print(a, b, args, kwargs)

func("hello")  #"hello" "default"
func("hello", 100)  # hello 100 ()
func("hello", 100, 84, 23, "word")  #hello 100 (84, 23, 'word') {}
func("hello", 100, 84, 23, "word", c=23, pop=43)   #hello 100 (84, 23, 'word') {'c': 23, 'pop': 43}


"=========================================Виды аргументов========================================"
#1. позиционные (по порядку параметров)
#2. именнованые (по имени параметров)

def func2(a, b):
    print(f"a={a}, b={b}")

func2(10, 20) #позиционно
# a=10 b=20

func2(a=30, b=40) #именованно
# a=30 b=40

"===========================================Звёздочки=========================================="
list1 = [1,2,[3],4,5]
list2 = [*list1]   #одна зведочка распаковывает 
print(list2)       #[1, 2, [3], 4, 5]

dict1 = {"a":1, "b":2}
list3 =[*dict1]      #  ['a', 'b']
list4 = {**dict1}    #  {'a': 1, 'b': 2}
print(list3, list4)